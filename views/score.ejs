<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Nhập điểm cho sinh viên <%= studentName %></title>
  <link rel="icon" href="/uploads/MC2.png" type="image/x-icon">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #f6d365 0%, #fda085 100%);
    }
    .table-container {
      background: rgba(255, 255, 255, 0.9);
      border-radius: 20px;
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1), 0 5px 15px rgba(0, 0, 0, 0.07);
      overflow: hidden;
      backdrop-filter: blur(10px);
    }
    .table-header {
      background: linear-gradient(90deg, #6a11cb 0%, #2575fc 100%);
    }
    .table-row {
      transition: all 0.3s ease;
    }
    .table-row:hover {
      background-color: rgba(37, 117, 252, 0.1);
      transform: translateY(-2px);
    }
    .input-score {
      background-color: #ffffff;
      border: 1px solid #e2e8f0;
      transition: all 0.3s ease;
    }
    .input-score:hover, .input-score:focus {
      border-color: #2575fc;
      box-shadow: 0 0 0 3px rgba(37, 117, 252, 0.2);
    }
    .btn-edit {
      background: linear-gradient(90deg, #6a11cb 0%, #2575fc 100%);
      transition: all 0.3s ease;
    }
    .btn-edit:hover {
      opacity: 0.9;
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(37, 117, 252, 0.1);
    }
  </style>
</head>
<body class="min-h-screen p-8 flex items-center justify-center">
  <div class="container mx-auto max-w-4xl">
    <header class="mb-12 text-center">
      <h1 class="text-5xl font-bold text-white mb-4 shadow-text">Bảng Điểm Sinh Viên</h1>
      <p class="text-2xl text-white shadow-text">Sinh viên: <span class="font-semibold"><%= studentName %></span></p>

    </header>

    <div class="table-container">
      <form id="scoreForm">
        <input type="hidden" id="iduser" name="iduser" value="<%= iduser %>">
        <input type="hidden" id="idclass" name="idclass" value="<%= idclass %>">

        <table class="w-full">
          <thead>
            <tr class="table-header">
              <th class="px-6 py-4 text-left text-sm font-medium text-white uppercase tracking-wider">Tên cột điểm</th>
              <th class="px-6 py-4 text-left text-sm font-medium text-white uppercase tracking-wider">Điểm</th>
              <th class="px-6 py-4 text-left text-sm font-medium text-white uppercase tracking-wider">Hành động</th>
            </tr>
          </thead>
          <tbody>
            <% const scores = [
                { name: 'score1', label: 'Quá trình 1' },
                { name: 'score2', label: 'Quá trình 2' },
                { name: 'score3', label: 'Quá trình 3' },
                { name: 'mid_score', label: 'Điểm giữa kỳ' },
                { name: 'final_score', label: 'Điểm cuối kỳ' },
                { name: 'gpa_score', label: 'Điểm trung bình' }
            ] %>
            <% scores.forEach(score => { %>
              <tr class="table-row">
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800"><%= score.label %></td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                  <input type="number" id="<%= score.name %>" name="<%= score.name %>" min="0" max="10" step="0.1"
                  class="input-score w-24 px-3 py-2 rounded-md focus:outline-none"
                  value="<%= existingScores[score.name] !== undefined ? existingScores[score.name] : '' %>"
                  disabled>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button type="button" class="toggle-edit btn-edit text-white px-4 py-2 rounded-md"
                          data-field="<%= score.name %>">
                    <%= existingScores[score.name] ? 'Sửa' : 'Lưu' %>
                  </button>
                </td>
              </tr>
            <% }) %>
          </tbody>
                  </table>
      </form>
    </div>

    <div class="mt-12 text-center">
      <a href="/classes/<%= idclass %>/students" class="bg-white text-gray-800 font-semibold py-3 px-8 rounded-full transition duration-300 ease-in-out inline-block hover:bg-gray-100 hover:shadow-lg transform hover:-translate-y-1">
        Quay lại danh sách sinh viên
      </a>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const toggleButtons = document.querySelectorAll('.toggle-edit');
  
      // Khôi phục trạng thái nút từ localStorage
      toggleButtons.forEach(button => {
        const field = button.dataset.field;
        const isEditing = localStorage.getItem(field) === 'true';
  
        const input = document.getElementById(field);
        input.disabled = !isEditing; // Vô hiệu hóa nếu không phải chế độ chỉnh sửa
        button.textContent = isEditing ? 'Lưu' : 'Sửa'; // Đặt văn bản nút dựa trên trạng thái
      });
  
      toggleButtons.forEach(button => {
        button.addEventListener('click', function() {
          const field = this.dataset.field;
          const input = document.getElementById(field);
          const isDisabled = input.disabled;
  
          if (isDisabled) {
            input.disabled = false;
            this.textContent = 'Lưu'; // Thay đổi chữ trên nút thành "Lưu"
            localStorage.setItem(field, 'true'); // Lưu trạng thái chỉnh sửa vào localStorage
            input.focus();
          } else {
            saveScore(field, input.value).then(success => {
              if (success) {
                input.disabled = true; // Vô hiệu hóa trường nhập
                this.textContent = 'Sửa'; // Đặt lại chữ trên nút thành "Sửa"
                localStorage.setItem(field, 'false'); // Cập nhật trạng thái vào localStorage
              }
            });
          }
        });
      });
  
      async function saveScore(field, value) {
        const iduser = document.getElementById('iduser').value;
        const idclass = document.getElementById('idclass').value;
  
        try {
          const response = await fetch('/admin/score/save', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ iduser, idclass, field, value }),
          });
  
          const result = await response.json();
  
          if (result.success) {
            Swal.fire({
              icon: 'success',
              title: 'Thành công!',
              text: `Điểm ${field} đã được lưu.`,
              confirmButtonColor: '#2575fc',
            });
            return true; // Đánh dấu là đã lưu thành công
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Lỗi!',
              text: 'Có lỗi xảy ra khi lưu điểm.',
              confirmButtonColor: '#2575fc',
            });
            return false; // Đánh dấu là lưu không thành công
          }
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Lỗi!',
            text: 'Có lỗi xảy ra khi lưu điểm.',
            confirmButtonColor: '#2575fc',
          });
          return false; // Đánh dấu là lưu không thành công
        }
      }
    });
  </script>
  </body>
</html>
